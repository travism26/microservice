;; gorilla-repl.fileformat = 1

;; **
;;; # Gorilla REPL Trav Testing ? :\
;;; 
;;; Welcome to gorilla :-)
;;; 
;;; This Session is to evaluate the `clojure.java.jdbc` library for db access
;;; 
;;; Shift + enter evaluates code. Hit ctrl+g twice in quick succession or click the menu icon (upper-right corner) for more commands ...
;;; 
;;; It's a good habit to run each worksheet in its own namespace: feel free to use the declaration we've provided below if you'd like.
;; **

;; @@
(ns microservice.service
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.string :as str]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(def db {:dbtype "postgresql"
         :dbname "micro"
         :host "localhost"
         :user "postgres"
         :password ""})
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;microservice.service/db</span>","value":"#'microservice.service/db"}
;; <=

;; @@
(def state-sql (jdbc/create-table-ddl :usernames [[:user_id :serial "PRIMARY KEY"]
                                                  [:username "VARCHAR(50)"]
                                                  [:first_name "VARCHAR(25)"]
                                                  [:last_name "VARYING"]]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;microservice.service/state-sql</span>","value":"#'microservice.service/state-sql"}
;; <=

;; @@
(println state-sql
        )
;; @@
;; ->
;;; CREATE TABLE usernames (user_id serial PRIMARY KEY, username VARCHAR(50), first_name VARCHAR(25), last_name VARYING)
;;; 
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(jdbc/execute! db [state-sql])
;; @@

;; @@
(def state-sql (jdbc/create-table-ddl :usernames [[:user_id :serial "PRIMARY KEY"]
                                                  [:username "VARCHAR(50)"]
                                                  [:first_name "VARCHAR(25)"]
                                                  [:last_name "VARCHAR(25)"]]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;microservice.service/state-sql</span>","value":"#'microservice.service/state-sql"}
;; <=

;; @@
(jdbc/execute! db [state-sql])
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-unkown'>0</span>","value":"0"}],"value":"[0]"}
;; <=

;; @@
(jdbc/insert! db :usernames {:username "travism" :first_name "travis" :last_name "martin"})
;; @@
;; =>
;; @@
(jdbc/query db ["select * from usernames where username = ?" "travism"])
;; @@
;; =>
;; <=

;; @@
(jdbc/insert-multi! db :usernames [{:username "john" :first_name "john" :last_name "doe"}
                                   {:username "test" :first_name "tester" :last_name "dude"}])
;; @@
;; =>
;; @@
(jdbc/db-do-prepared db ["INSERT into usernames (username, first_name, last_name) VALUES (?, ?, ?)"
                        ["hello", "jonny", "mcay"]
                        ["user_two", "jessie" "jay"]] {:multi? true})
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-unkown'>(1 1)</span>","value":"(1 1)"}
;; <=

;; @@
(jdbc/update! db :usernames {:first_name "allister"} ["username= ?" "travism"])
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-unkown'>(1)</span>","value":"(1)"}
;; <=

;; @@
(jdbc/query db ["select * from usernames"])
;; @@

;; <=

;; @@

;; @@
